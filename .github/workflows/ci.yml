name: CICD Workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2-beta
        with:
          node-version: "14"
          check-latest: true
      - uses: bahmutov/npm-install@v1
      - run: npm run validate
      - run: npm test -- --ci
      - uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
      - uses: wbeuil/wait-for-deployment@v1.0.0
        id: deployment
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - uses: cypress-io/github-action@v2
        with:
          record: true
        env:
          CYPRESS_BASE_URL: ${{ steps.deployment.outputs.url }}
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - uses: treosh/lighthouse-ci-action@v3
        continue-on-error: true
        id: audit
        with:
          urls: |
            ${{ steps.deployment.outputs.url }}
            ${{ steps.deployment.outputs.url }}/fr
          configPath: './lighthouserc.js'
          temporaryPublicStorage: true
          runs: "3"
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
      - uses: actions/github-script@v3
        if: ${{ github.event_name == 'pull_request' }}
        id: score
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const manifests = ${{ steps.audit.outputs.manifest }}
            const links = ${{ steps.audit.outputs.links }}
            const results = manifests.filter(entry => entry.isRepresentativeRun)

            const comment = [
              `# Lighthouse Report`
            ]

            const formatResult = (res) => Math.round((res * 100))

            let i = 1;
            for (const result of results) {
              const perf = formatResult(result.summary.performance)
              const a11y = formatResult(result.summary.accessibility)
              const pract = formatResult(result.summary['best-practices'])
              const seo = formatResult(result.summary.seo)
              const pwa = formatResult(result.summary.pwa)

              comment.push(
                `### Summary for [${result.url}](${result.url})`,
                `![Lighthouse svg](https://lh-svg.vercel.app/api/svg?perf=${perf}&a11y=${a11y}&pract=${pract}&seo=${seo}&pwa=${pwa}&theme=dark)`,
                `> [Full report here ➡️](${links[result.url]})`
              )

              if (i !== results.length) {
                comment.push(
                  `---`
                )
              }

              i++
            }

            core.setOutput("comment", comment.join('\n'));
      - uses: peter-evans/find-comment@v1
        if: ${{ github.event_name == 'pull_request' }}
        id: comment
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: Lighthouse Report
      - uses: peter-evans/create-or-update-comment@v1
        if: ${{ github.event_name == 'pull_request' && steps.comment.outputs.comment-id == 0 }}
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: ${{ steps.score.outputs.comment }}
      - uses: peter-evans/create-or-update-comment@v1
        if: ${{ github.event_name == 'pull_request' && steps.comment.outputs.comment-id != 0 }}
        with:
          comment-id: ${{ steps.comment.outputs.comment-id }}
          edit-mode: replace
          body: ${{ steps.score.outputs.comment }}
